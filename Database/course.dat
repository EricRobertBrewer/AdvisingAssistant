CS|101|Introduction to Computers and Computing|Lecture, 2 hours; laboratory, 2 hours. Topics include computer types, history of computing, computer organizations, survey of computer languages, program development, computer applications, networking, and computers in society. Weekly hands-on experience with personal computers. Not applicable to the CS major. Recommended for all students. |B|3
CS|115|Programming I|Lecture, 3 hours; laboratory, 3 hours. An overview of computer organization; arithmetic and logical expressions, decision and iteration, simple I/O; subprograms; principles of good programming style, readability, documentation, structured programming concepts; top-down design and refinements; techniques of debugging and testing. Use of the above concepts will be implemented in a standard high-level programming language. |B|4
CS|115W|Programming I Workshop|A workshop designed to be taken with CS 115. Exploration of programming concepts through problem solving in a group setting. |B|1
CS|210|Introduction to Unix|Laboratory, 3 hours. An introduction to the use of Unix as a programming environment. Communicating with a Unix host, shells and shell commands, files and directories, X Window System, jobs and processes, scripting, programming utilities (compiler, linker, debugger, make, hex dump, etc.). |B|1
CS|215|Programming II|Lecture, 3 hours; laboratory, 3 hours. Pointers and dynamic allocation of storage; linked lists; an introduction to the object oriented programming (OOP) paradigm; classes and objects; encapsulation; member variables and member functions; inheritance and polymorphism; scoping; templates; iterators; error handling techniques. |4
CS|242|Discrete Structures fot Computer Science|Lecture, 4 hours. Coverage of fundamental mathematical concepts blended with their applications in computer science. Topics to include sets, functions and relations, Boolean algebra, normal forms, Karnaugh maps and other minimization techniques, predicate logic, formal and informal proof techniques, relational algebra, basic counting techniques, recurrence relations, introduction to graph theory with applications to computer science. |B|4
CS|252|Introduction to Computer Organization|Lecture, 3 hours; laboratory, 3 hours. This course looks at the interface between computer hardware and software by introducing computer architecture and low-level programming. Topics to be covered include: data representations, digital logic, combinational and sequential circuits, computer system organization from the machine language point of view, and assembly language implementation of high-level constructs. |B|4
CS|315|Data Structures|Lecture, 3 hours; laboratory, 3 hours. This course introduces the concept of the organization of data into different structures to support the efficient implementation of computer algorithms. The emphasis of the course is on the internal representation of the elementary and intermediate data structures, their time and space requirements, and their applications. A second component of the course is the study of more advanced features of object oriented programming. |B|4
CS|340|Computer Security and Malware|Lecture, 3 hours; laboratory, 2 hours. Current methods for increasing security, protecting privacy and guaranteeing degrees of confidentiality of computer records; ensuring computer installation safety; protecting software products; preventing and dealing with crime; value systems, ethics and human factors affecting use and misuse of computers. Discussion of recent technical, legal and sociopolitical issues influencing computer security problems. |S|3
CS|349|Problem Solving in a Team Environment|Laboratory, 2 hours. This course focuses on problem solving and program development in a team programming environment. Topics include techniques for problem analysis and algorithm design, rapid implementation and pair program- ming methods, use of standard container classes and library functions. Different types of problems will be selected each semester. May be repeated for credit. A maximum of 3 units can be applied to the Computer Science major. SSU students taking this course participate in regional and national programming competitions. |F|1
CS|351|Computer Architecture|Lecture, 4 hours. Instruction set design; stages of instruction execution, data and control path design; CISC, RISC, stack architectures; pipelining; program optimization techniques, memory hierarchy: cache models and design issues, virtual memory and secondary storage; I/O interfacing; advanced topics to include some of the following: parallel architectures, DSP or other special purpose architecture, FPGA, reconfigurable architecture, asynchronous circuit design. |F|4
CS|355|Database Management Systems|Lecture 4 hours. This course focuses on the theoretical as well as the practical aspects of modern database systems. Topics include the study of the entity-relationship (E/R) model, relational algebra, data normalization, XML as a semi-structured data model, data integrity, and database administration. Current tools and technology are used to create and manipulate sample databases. |S|4
CS|370|Software Design and Development|Lecture 4 hours. This course covers techniques of software design and development. Software lifecycle, requirements, formal specification, metrics, design, functional and structural testing, rapid prototyping, complexity, version control, and team management are sample topics. Software metrics and tools for component based software development are covered. |S|4
CS|415|Algorithm Analysis|Lecture 4 hours. A study of the design and analysis of algorithms with an emphasis on execution and storage efficiency. Topics will include algorithms for searching and sorting, hashing, exploring graphs, integer and polynomial arithmetic. Foundations in recurrence relations, combinatorics, probability, and graph theory as used in algorithm analysis are covered. Standard design techniques such as divide-and-conquer, greedy method, dynamic programming, heuristics and probabilistic algorithms along with NP-completeness and approximation algorithms are included. |S|4
CS|450|Operating Systems|Lecture, 4 hours. Course covers the fundamental concepts of operating system design and implementation. Topics will include: multiprogramming and timesharing systems, concurrent programming, scheduling policies, resource management, security, virtual machine implementations, I/O subsystems and drivers, and systems programming fundamentals. |F|4
CS|454|Theory of Computation|Lecture 4 hours. Mathematical study of the types of problems that can and cannot be solved by computers. Abstract mathematical models of computing devices and language specification systems. Classification of computer-solvable problems. |F|4
CS|460|Programming Languages|Lecture, 4 hours. A survey of the syntactic, semantic and implementation features of functional, procedural, object-oriented, logic and concurrent programming languages. |F|4
CS|470|Advanced Software Design Project|Lecture, 3 hours. This course is a project based course designed to provide a "real world, team oriented" capstone experience for computer science majors. Coursework will be organized around large programming projects. The content of the projects may vary depending on the interests of the instructor and may include industry, government, non-profit organization, or other affiliations. |S|3
MATH|161|Calculus I|(No description for MATH 161)|B|4
